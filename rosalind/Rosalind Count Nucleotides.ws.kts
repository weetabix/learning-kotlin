//class Problem1 {
//
//    fun countBases(strand: String): Map<String, Int> {
//        val basesMap = mutableMapOf("A" to 0, "C" to 0, "G" to 0, "T" to 0)
//        //println(strand.length)
//        for (base in 0..strand.length - 1) {
//            when (strand[base].toString()) {
//                "A" -> basesMap.computeIfPresent("A") { _, v -> v + 1 }
//                "G" -> basesMap.computeIfPresent("G") { _, v -> v + 1 }
//                "C" -> basesMap.computeIfPresent("C") { _, v -> v + 1 }
//                "T" -> basesMap.computeIfPresent("T") { _, v -> v + 1 }
//                else -> println("Glitch " + base + strand[base])
//            }
//        }
//        return basesMap
//   }
//
//}

val foo = Problem1()
val dna = "TGATGTGACGGGTTCGCAGGTGCCCTGTGATTAGAGTAATGAACTTCGTCCTAGCGTAAAAGTGCTCCGGCACATAGAT" +
        "TGCTTTCCCGGGATATATATGCATGTAGGAGATGTTTCCTCATGCTTCCGGTAGGCTAGTCCTACCTCATTAGTCCACTTA" +
        "ACAGTGAACCCTTTCCATCATTAGACGTGGAGAACCATTGTCGCCCCCACAAGCAGGATAAGGAGTTCATCCCCTTAAGCA" +
        "CAAAATCAAATACAAAAGGCAAGTTTGAGACTCTTGTCAAATCTACTCTTTTGCGACTCACAGGCGCAGTTGCAACAATTG" +
        "ATAAGGCTTTGAATCATTAGGAAGACCATAGAGCGAACAAGTCCTCAAACGCGAATGACGGGAGATCACTGCAGACTGTGC" +
        "TAGCTACAGCGCGCCTGCCCGTTCCTCGCCCATGGCCCAAAGAGCCCTAAACCGAGGATGGGTTCGTTTCCGAGGCTCGCG" +
        "TCCTTGCCAGTCGCACCCCTATTAATTGACGATCGTTGGTAAGTTTCCTAAATGCGCATAAGCGACTCTAATAATATGGAC" +
        "GCATCGATAGACACCTAGGTTGTAACCGTGGGGTTAAGACATATGTATTCGACAGGTCGTTTATACTAACATGGTACGTGT" +
        "GCTTCGTGAACTATCTGTCAACTGTAGGTCTCCAACGTGATGAAGTAAGCCCTTAGCGGTGGTTATGTGGCTGGGTTAGTA" +
        "CAGTACGTTTGTGTTTCCGACCCAGTATCTGCTTGCCTATGACGTGCCCCCCAGTCGGAGGAACAAGAATCAAGGCTGCTG" +
        "GATTATCATACGTATGACTGTTAAATCGA"

println(foo.countBases(dna))